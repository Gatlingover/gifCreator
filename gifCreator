#!/usr/bin/python

import sys, time, os, glob, argparse
from subprocess import call

#program is written from top to bottom. to go with the flow, you should start at bottom.
#basic outline run() reads options from command line and checks for PNG existance --> Creator reads options --> instructs Gif object how to be created.

class Gif():
    def __init__(self):
        """sets up gif object with name and path."""
        self.name = "gifCreation-" + time.strftime("%Y-%d-%m-%H-%M")
        self.path = "~/Pictures/Gifs/" + self.name + ".gif"
        self.source = sorted(glob.glob('*.png'))
        self.command = 'convert -delay 5 -loop 0 -resize ' + str(res) + ' -coalesce -layers OptimizePlus ' + ' '.join(self.source) + ' ~/Pictures/Gifs/' + self.name + '.gif'
    def normal(self, res):
        """The actual creation of a normal GIF. Takes a resolution as argument. Uses convert from ImageMagick"""
        call(self.command, shell = True)
    def eternal(self, res):
        """Creates a gif that goes back and forth in a loop eternally"""
        second_list = list(reversed(self.source[1:-1]))
        self.source = list(self.source + second_list)
        call(self.command, shell = True)
    def backwards(self, res):
        """Creates a gif that goes backwards"""
        self.source = list(reversed(self.source))
        call(self.command, shell=True)
    def checkSize(self):
        """Checks size of GIF file and returns it"""
        #formatted floating point so it shows only two first decimals.
        size = float("{0:.2f}".format(os.path.getsize(os.path.expanduser(self.path)) / (1024*1024.0)))
        return(size)

def Creator(res, style, limit):
    """A function that creates gif objects with propierties: resolution, style, size limit"""
    print("Creating a gif for you with the following settings: " + style + res + str(limit))
    gif = Gif()
    if style == 'eternal':
        gif.eternal(res)
    elif style == 'backwards':
        gif.backwards(res)
    else:
        gif.normal(res)
    if gif.checkSize() > limit:
        print("Success, but gif size is " + str(gif.checkSize()) + "MB. Your limit was " + str(limit) + " MB. I'll try again")
        os.remove(os.path.expanduser(gif.path))
        Creator(str(int((int(res)*0.80))), style)
    else:
        print("Your gif was generated succesfully and can be found at " + gif.path + " with a resoluton of " + res + "px and a size of " + str(gif.checkSize()) + " MB")

def run():
    try:
        glob.glob('*.png')
    except:
        print("Looks like there are not PNG files to work with here.")
    parser = argparse.ArgumentParser(description='Creates animated gif files using as a source all PNG found in the current directory.')
    parser.add_argument('-r', '--res', default=500, help='sets the resolution for the widest border of the gif. If blank is set to 500')
    parser.add_argument('-s', '--style', default='normal', help='you can create a NORMAL gif, an ETERNAL gif wich loops backs and forth or a BACKWARDS gif starting at the end of the file list. If blank is set to NORMAL')
    parser.add_argument('-l', '--limit', default=3, help='limits the filesize of your gif to INTEGER megabytes. If the gif is bigger, it will start again with a smaller resolution. If blank is set to 3 MB')
    arguments = parser.parse_args()
    res = arguments.res
    style = arguments.style
    limit = arguments.limit
    Creator(res, style, limit)

run()